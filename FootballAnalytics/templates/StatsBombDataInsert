
# Find match_id value
matches = sb.matches(competition_id=43, season_id=106)
competitions = sb.competitions()
events = sb.events(match_id=3869685)
import json
# Load the JSON file
#with open('3869685.json', 'r') as file:
#   data = json.load(file)
# Convert JSON to DataFrame
#df = pd.json_normalize(data)
#df.to_csv('events_360.csv'
 #         '')
df = pd.DataFrame(events)
df = df.sort_values(by=['match_id', 'period', 'timestamp', 'type'])
cols = df.columns
from unidecode import unidecode


def remove_accents(text):
    return unidecode(text)


df = df.replace(np.nan, None)
df['player'] = df['player'].astype(str).apply(remove_accents)
df[['match_id', 'player_id', 'possession_team_id', 'period', 'minute', 'second', 'duration']] = \
    df[['match_id', 'player_id', 'possession_team_id', 'period', 'minute', 'second', 'duration']].astype(float)
df = df.astype(str)
df = df.replace(['None', 'nan'], None)
# Filter shots DataFrame
shots_df = df.loc[df['type'] == 'Shot']
# Filter passes DataFrame
passes_df = df.loc[df['type'] == 'Pass']
events_df = df.filter(['id', 'foul_committed_advantage', 'foul_committed_offensive',
                       'foul_committed_penalty', 'foul_committed_type', 'foul_won_advantage',
                       'foul_won_defensive', 'foul_won_penalty', '50_50', 'bad_behaviour_card',
                       'foul_committed_card', 'ball_receipt_outcome', 'ball_recovery_offensive',
                       'ball_recovery_recovery_failure', 'block_deflection', 'block_offensive',
                       'counterpress', 'carry_end_location', 'pass_outcome', 'pass_end_location',
                       'dribble_nutmeg', 'dribble_outcome', 'dribble_overrun', 'duel_outcome',
                       'duel_type', 'duration', 'interception_outcome', 'location', 'match_id',
                       'minute', 'off_camera', 'out', 'period', 'play_pattern', 'player', 'player_id',
                       'position', 'possession', 'possession_team', 'possession_team_id',
                       'related_events', 'second', 'substitution_outcome', 'substitution_replacement',
                       'tactics', 'team', 'timestamp', 'type', 'under_pressure', 'shot_outcome'])

insert_query = """
    INSERT INTO events (
    id, foul_committed_advantage, foul_committed_offensive, foul_committed_penalty,
     foul_committed_type, foul_won_advantage, foul_won_defensive, foul_won_penalty,
      `50_50`, bad_behaviour_card, foul_committed_card, ball_receipt_outcome, ball_recovery_offensive,
       ball_recovery_recovery_failure, block_deflection, block_offensive, counterpress,
        carry_end_location, pass_outcome, pass_end_location, dribble_nutmeg, dribble_outcome,
         dribble_overrun, duel_outcome, duel_type, duration, interception_outcome,
          location, match_id, minute, off_camera, `out`, period, play_pattern, player,
           player_id, position, possession, possession_team, possession_team_id, related_events,
            second, substitution_outcome, substitution_replacement, tactics, team,
             timestamp, type, under_pressure, shot_outcome) VALUES (
         %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
          %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s,
          %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s); """

cursor.executemany(insert_query, events_df.values.tolist())
cnx.commit()

shots_df = shots_df.filter(['id', 'match_id', 'shot_aerial_won', 'shot_body_part', 'shot_end_location', 'shot_first_time', 'shot_freeze_frame', 'shot_key_pass_id', 'shot_one_on_one', 'shot_statsbomb_xg', 'shot_technique', 'shot_type'])
shots_insert_query = "INSERT INTO shots (id, match_id, shot_aerial_won, shot_body_part, shot_end_location, shot_first_time, shot_freeze_frame, shot_key_pass_id, shot_one_on_one, shot_statsbomb_xg, shot_technique, shot_type) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);"
cursor.executemany(shots_insert_query, shots_df.values.tolist())
cnx.commit()

passes_df = passes_df.filter(['id', 'pass_aerial_won', 'pass_angle', 'pass_assisted_shot_id', 'pass_body_part', 'pass_cross', 'pass_deflected', 'pass_goal_assist', 'pass_height', 'pass_inswinging', 'pass_length', 'pass_outswinging', 'pass_recipient', 'pass_shot_assist', 'pass_switch', 'pass_technique', 'pass_through_ball', 'pass_type', 'clearance_aerial_won', 'clearance_body_part', 'clearance_head', 'clearance_left_foot', 'clearance_other', 'clearance_right_foot'])
passes_insert_query = "INSERT INTO passes (id, pass_aerial_won, pass_angle, pass_assisted_shot_id, pass_body_part, pass_cross, pass_deflected, pass_goal_assist, pass_height, pass_inswinging, pass_length, pass_outswinging, pass_recipient, pass_shot_assist, pass_switch, pass_technique, pass_through_ball, pass_type, clearance_aerial_won, clearance_body_part, clearance_head, clearance_left_foot, clearance_other, clearance_right_foot) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);"
cursor.executemany(passes_insert_query, passes_df.values.tolist())
cnx.commit()

goalkeepers_df = df.filter(['id', 'goalkeeper_body_part', 'goalkeeper_end_location', 'goalkeeper_outcome', 'goalkeeper_position', 'goalkeeper_technique', 'goalkeeper_type'])
goalkeepers_insert_query = "INSERT INTO goalkeepers (id, goalkeeper_body_part, goalkeeper_end_location, goalkeeper_outcome, goalkeeper_position, goalkeeper_technique, goalkeeper_type) VALUES (%s, %s, %s, %s, %s, %s, %s);"
cursor.executemany(goalkeepers_insert_query, goalkeepers_df.values.tolist())
cnx.commit()

goalkeepers_insert_query = "INSERT INTO xt (match_minute, team_name, player_name, start_x, start_y, end_x, end_y, type_name, result_name, xT_value, matchid) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);"
cursor.executemany(goalkeepers_insert_query, xt_df.values.tolist())
cnx.commit()

query = """INSERT INTO matchstats (
        minute, ATPenaltyBoxEntries, HTPenaltyBoxEntries, ATFinalThirdEntries, HTFinalThirdEntries, ATSetPiecexG, HTSetPiecexG,
        ATOpenPlayxG, HTOpenPlayxG, ATxG, HTxG, ATCumShotsOT, HTCumShotsOT, ATCumShots, HTCumShots, ATPossession, HTPossession,
        ATAccuratePasses, HTAccuratePasses, ATRedCards, HTRedCards, ATScorer, HTScorer, ATCumGoals, HTCumGoals, period,
        match_minute, timeline, matchid, HTPasses, ATPasses) VALUES (
        %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s); """
cursor.executemany(query, events.values.tolist())
cnx.commit()